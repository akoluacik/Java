/**
 * 
 */
package com.hibernatedemo;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

/**
 * @author anilk
 *
 */


@Entity
@Table(name="city")
public class City {
	@Id
	@Column(name="ID")
	private int id;
	
	@Column(name="name")
	private String name;

	@Column(name="countryCode")
	private String countryCode;

	@Column(name="district")
	private String district;

	@Column(name="population")
	private int population;
	
	
	public City() {
		System.out.println("To connect this class to db and fill fields with db columns, use @Entity Annotation!");
		System.out.println("We can use org.hibernate.annotations, but better use javax.persistence");
		System.out.println("Entity means the class is actually a database object");
		System.out.println("To fill the columns, we used the annotations just above the the class fields");
		System.err.println("If you won't use @Column annotation, it tries to find the columns with exactly the same name of the variables");
	}
	
	public int getId() {
		return id;
	}
	
	public void setId(int id) {
		this.id = id;
	}
	
	public String getName() {
		return name;
	}
	
	public void setName(String name) {
		this.name = name;
	}

	public String getCountryCode() {
		return countryCode;
	}
	
	public void setCountryCode(String countryCode) {
		this.countryCode = countryCode;
	}
	
	public String getDistrict() {
		return district;
	}
	
	public void setDistrict(String district) {
		this.district = district;
	}
	
	public int getPopulation() {
		return population;
	}
	
	public void setPopulation(int population) {
		this.population = population;
	}
	
	
}
